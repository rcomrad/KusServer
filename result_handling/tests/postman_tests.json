{
	"info": {
		"_postman_id": "916b24f8-bc54-4ae1-98c0-18b3bfbd8fc5",
		"name": "KusJournalTester",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25083981"
	},
	"item": [
		{
			"name": "Clear system",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/command/restart/empty",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"command",
						"restart",
						"empty"
					]
				}
			},
			"response": []
		},
		{
			"name": "False log in reg user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Reg user isn't in use\", function () {\r",
							"  pm.response.to.have.status(401);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"login\": \"reg\",\r\n    \"password\": \"123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:18080/api/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sign up bad email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Bad email rejected\", () => {\r",
							"    pm.expect(pm.response.text()).to.equal(\"Bad email address!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"login\": \"reg\",\r\n    \"password\": \"123\",\r\n    \"email\": \"bad\",\r\n    \"key\": \"bobr\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:18080/api/registration",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"registration"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sign up bad key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Bad key rejected\", () => {\r",
							"    pm.expect(pm.response.text()).to.equal(\"Bad key!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"login\": \"reg\",\r\n    \"password\": \"123\",\r\n    \"email\": \"oa1oa@mail.ru\",\r\n    \"key\": \"bad key\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:18080/api/registration",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"registration"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sign up reg user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"login\": \"reg\",\r\n    \"password\": \"123\",\r\n    \"email\": \"oa1oa@mail.ru\",\r\n    \"key\": \"bobr\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:18080/api/registration",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"registration"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sign up login in use",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Used login rejected\", () => {\r",
							"    pm.expect(pm.response.text()).to.equal(\"Username already in use!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"login\": \"reg\",\r\n    \"password\": \"123\",\r\n    \"email\": \"comrade_1997@mail.ru\",\r\n    \"key\": \"bobr\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:18080/api/registration",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"registration"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sign up email in use",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Used email rejected\", () => {\r",
							"    pm.expect(pm.response.text()).to.equal(\"Email already in use!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"login\": \"reg2\",\r\n    \"password\": \"123\",\r\n    \"email\": \"oa1oa@mail.ru\",\r\n    \"key\": \"bobr\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:18080/api/registration",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"registration"
					]
				}
			},
			"response": []
		},
		{
			"name": "False log in unconfirmed user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Server is waiting for confirmation email from the user\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"login\": \"reg\",\r\n    \"password\": \"123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:18080/api/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:18080/api/confirm/2=2023-9-26_21-56-18=lnlfdxfirc",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"confirm",
						"2=2023-9-26_21-56-18=lnlfdxfirc"
					]
				}
			},
			"response": []
		},
		{
			"name": "Log in reg user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"login\": \"reg\",\r\n    \"password\": \"123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:18080/api/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Clear system",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"value": "admin",
						"type": "text"
					}
				],
				"url": {
					"raw": "127.0.0.1:18080/api/command/restart/empty",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"command",
						"restart",
						"empty"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check school emptiness",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Plan created successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"schools\": []\r",
							"    };\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/get/all/school",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"all",
						"school"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create school",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"full_name\": \"ГБКНОУХ имени Дениса Абрамовича Ежова\",\r\n    \"short_name\": \"СГОШ №777\",\r\n    \"start_date\": \"2022-09-1\"\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/school",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"school"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check school",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Plan created successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"school\": {\r",
							"            \"short_name\": \"СГОШ №777\",\r",
							"            \"id\": 1,\r",
							"            \"full_name\": \"ГБКНОУХ имени Дениса Абрамовича Ежова\",\r",
							"            \"start_date\": \"2022-09-01\"\r",
							"        }\r",
							"    };\r",
							"\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/get/by_id/school/1",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"by_id",
						"school",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check user emptiness",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Plan created successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"users\": []\r",
							"    };\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"value": "add_user",
						"type": "text"
					}
				],
				"url": {
					"raw": "127.0.0.1:18080/api/get/all/user",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"all",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "False log in Abba user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User table is empty\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"login\": \"test1\",\r\n    \"password\": \"abba\"\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Abba user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "token",
						"value": "add_user",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"login\": \"test1\",\r\n    \"password\": \"abba\",\r\n    \"name\": \"Абба\",\r\n    \"surname\": \"Агамовна\",\r\n    \"role\": \r\n    [\r\n        \"teacher\",\r\n        \"grade_head\",\r\n        \"add_user\",\r\n        \"add_plan\"\r\n    ],\r\n    \"school_id\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/user",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Log in Abba user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Abba user created successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"user\": {\r",
							"            \"id\": 1,\r",
							"            \"login\": \"test1\",\r",
							"            \"surname\": \"Агамовна\",\r",
							"            \"name\": \"Абба\",\r",
							"            \"status\": 10,\r",
							"            \"email\": \"NUN\",\r",
							"            \"school_id\": 1,\r",
							"            \"key\": \"NUN\",\r",
							"            \"role\": [\r",
							"                \"add_plan\",\r",
							"                \"add_user\",\r",
							"                \"grade_head\",\r",
							"                \"teacher\"\r",
							"            ]\r",
							"        }\r",
							"    };\r",
							"\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"login\": \"test1\",\r\n    \"password\": \"abba\"\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create teacher user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"login\": \"teacher\",\r\n    \"password\": \"teacher123\",\r\n    \"name\": \"teacherN\",\r\n    \"surname\": \"teacherS\",\r\n    \"role\": \r\n    [\r\n        \"teacher\"\r\n    ],\r\n    \"school_id\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/user?token=add_user",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"user"
					],
					"query": [
						{
							"key": "token",
							"value": "add_user"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Log in teacher user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Teacher user created successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"user\": {\r",
							"            \"id\": 2,\r",
							"            \"login\": \"teacher\",\r",
							"            \"surname\": \"teacherS\",\r",
							"            \"name\": \"teacherN\",\r",
							"            \"status\": 10,\r",
							"            \"email\": \"NUN\",\r",
							"            \"school_id\": 1,\r",
							"            \"key\": \"NUN\",\r",
							"            \"role\": [\r",
							"                \"teacher\"\r",
							"            ]\r",
							"        }\r",
							"    };\r",
							"\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"login\": \"teacher\",\r\n    \"password\": \"teacher123\"\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create methodist user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"login\": \"methodist\",\r\n    \"password\": \"methodist123\",\r\n    \"name\": \"methodistN\",\r\n    \"surname\": \"methodistS\",\r\n    \"role\": \r\n    [\r\n        \"add_journal\"\r\n    ],\r\n    \"school_id\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/user?token=add_user",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"user"
					],
					"query": [
						{
							"key": "token",
							"value": "add_user"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Log in methodist user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Methodist user created successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"user\": {\r",
							"            \"id\": 3,\r",
							"            \"login\": \"methodist\",\r",
							"            \"surname\": \"methodistS\",\r",
							"            \"name\": \"methodistN\",\r",
							"            \"status\": 10,\r",
							"            \"email\": \"NUN\",\r",
							"            \"school_id\": 1,\r",
							"            \"key\": \"NUN\",\r",
							"            \"role\": [\r",
							"                \"add_journal\"\r",
							"            ]\r",
							"        }\r",
							"    };\r",
							"\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"login\": \"methodist\",\r\n    \"password\": \"methodist123\"\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create head user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"login\": \"head\",\r\n    \"password\": \"head123\",\r\n    \"name\": \"headN\",\r\n    \"surname\": \"headS\",\r\n    \"role\": \r\n    [\r\n        \"teacher\",\r\n        \"grade_head\"\r\n    ],\r\n    \"school_id\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/user?token=add_user",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"user"
					],
					"query": [
						{
							"key": "token",
							"value": "add_user"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Log in head user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Head user created successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"user\": {\r",
							"            \"id\": 4,\r",
							"            \"login\": \"head\",\r",
							"            \"surname\": \"headS\",\r",
							"            \"name\": \"headN\",\r",
							"            \"status\": 10,\r",
							"            \"email\": \"NUN\",\r",
							"            \"school_id\": 1,\r",
							"            \"key\": \"NUN\",\r",
							"            \"role\": [\r",
							"                \"grade_head\",\r",
							"                \"teacher\"\r",
							"            ]\r",
							"        }\r",
							"    };\r",
							"\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"login\": \"head\",\r\n    \"password\": \"head123\"\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check plan emptiness",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Plan created successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"plans\": []\r",
							"    };\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"value": "add_plan",
						"type": "text"
					}
				],
				"url": {
					"raw": "127.0.0.1:18080/api/get/all/plan",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"all",
						"plan"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check theme emptiness",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Plan created successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"themes\": []\r",
							"    };\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"value": "add_plan",
						"type": "text"
					}
				],
				"url": {
					"raw": "127.0.0.1:18080/api/get/all/theme",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"all",
						"theme"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create plan",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "token",
						"value": "add_plan",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Тест",
							"type": "text"
						},
						{
							"key": "subject_id",
							"value": "1",
							"type": "text"
						},
						{
							"key": "filename",
							"value": "plan_test.csv",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "/D:/projects/VSCode/KusServer/tests/plan_test.csv"
						},
						{
							"key": "index",
							"value": "csv",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "127.0.0.1:18080/api/upload/plan",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"upload",
						"plan"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check plan",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Plan created successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"plan\": {\r",
							"            \"subject_id\": 1,\r",
							"            \"id\": 1,\r",
							"            \"url\": \"D:/projects/data/upload/1-plan_test.csv\",\r",
							"            \"name\": \"Тест\"\r",
							"        }\r",
							"    };\r",
							"\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"value": "add_plan",
						"type": "text"
					}
				],
				"url": {
					"raw": "127.0.0.1:18080/api/get/by_id/plan/1",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"by_id",
						"plan",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check themes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Plan created successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"themes\": [\r",
							"            {\r",
							"                \"id\": 1,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Техника безопасности на рабочем месте\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 2,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Введение: Общие сведения о языке С++\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 3,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Введение: Работа со средой\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 4,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Первая программа\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 5,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Булева алгебра\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 6,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Общая структура программы на языке С++\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 7,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Типы данных\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 8,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Задача. Решение квадратного уравнения \",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 9,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Математические функции\",\r",
							"                \"hour_count\": 4\r",
							"            },\r",
							"            {\r",
							"                \"id\": 10,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Цикл while\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 11,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Цикл for\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 12,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Ввод-вывод данных\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 13,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Файловый ввод-вывод\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 14,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Задача на поиск суммы цифр числа\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 15,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Отоладка\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 16,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Тестирование\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 17,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Оценка асимптотики программы\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 18,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Способы организации кода\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 19,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Поиск суммы элементов массива\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 20,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Понятие массива\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 21,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Целочисленные массивы\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 22,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Сумма элементов массива\",\r",
							"                \"hour_count\": 4\r",
							"            },\r",
							"            {\r",
							"                \"id\": 23,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Поиск минимального и максимального элемента в массиве\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 24,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Подсчёт количества элементов с заданными свойствами в массиве\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 25,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Кодовая таблица ASCII\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 26,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Палиндромы\",\r",
							"                \"hour_count\": 6\r",
							"            },\r",
							"            {\r",
							"                \"id\": 27,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Контейнер vector\",\r",
							"                \"hour_count\": 6\r",
							"            },\r",
							"            {\r",
							"                \"id\": 28,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Некоторые функции библиотеки algorithm\",\r",
							"                \"hour_count\": 6\r",
							"            },\r",
							"            {\r",
							"                \"id\": 29,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Понятие двумерных массивов\",\r",
							"                \"hour_count\": 4\r",
							"            },\r",
							"            {\r",
							"                \"id\": 30,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Задачи на вывод двумерных массивов, таблиц\",\r",
							"                \"hour_count\": 4\r",
							"            },\r",
							"            {\r",
							"                \"id\": 31,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Задачи на тему игры морской бой\",\r",
							"                \"hour_count\": 6\r",
							"            },\r",
							"            {\r",
							"                \"id\": 32,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Дискретная математика\",\r",
							"                \"hour_count\": 6\r",
							"            },\r",
							"            {\r",
							"                \"id\": 33,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Понятие графа\",\r",
							"                \"hour_count\": 6\r",
							"            },\r",
							"            {\r",
							"                \"id\": 34,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Представление графа в программе\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 35,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Ввод-вывод графа\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 36,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Алгоритм BFS\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 37,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Примитивная реализация алгоритма BFS\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 38,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Задачи на обход в ширину\",\r",
							"                \"hour_count\": 6\r",
							"            },\r",
							"            {\r",
							"                \"id\": 39,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Понятие динамического программирования\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 40,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Задачи на поиск максимальной возрастающей подпоследовательности\",\r",
							"                \"hour_count\": 6\r",
							"            },\r",
							"            {\r",
							"                \"id\": 41,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Задачи регионального поиска \",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 42,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Задачи на теорию автоматов\",\r",
							"                \"hour_count\": 6\r",
							"            },\r",
							"            {\r",
							"                \"id\": 43,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Жадные алгоритмы\",\r",
							"                \"hour_count\": 6\r",
							"            },\r",
							"            {\r",
							"                \"id\": 44,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Простые числа, решето Эратосфена \",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 45,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Алгоритм Евклида для нахождения НОД и его применение в задачах\",\r",
							"                \"hour_count\": 4\r",
							"            },\r",
							"            {\r",
							"                \"id\": 46,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Сортировка подсчётом \",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 47,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Топологическая сортировка\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 48,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Быстрая сортировка\",\r",
							"                \"hour_count\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 49,\r",
							"                \"plan_id\": 1,\r",
							"                \"name\": \"Блочная сортировка\",\r",
							"                \"hour_count\": 2\r",
							"            }\r",
							"        ]\r",
							"    };\r",
							"\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"value": "add_plan",
						"type": "text"
					}
				],
				"url": {
					"raw": "127.0.0.1:18080/api/get/all/theme",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"all",
						"theme"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change plan",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "token",
						"value": "add_plan",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1,\r\n    \"name\": \"GAGA\"\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/plan",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"plan"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check changed plan",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Plan created successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"plan\": {\r",
							"            \"subject_id\": 1,\r",
							"            \"id\": 1,\r",
							"            \"url\": \"D:/projects/data/upload/1-plan_test.csv\",\r",
							"            \"name\": \"GAGA\"\r",
							"        }\r",
							"    };\r",
							"\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"value": "add_plan",
						"type": "text"
					}
				],
				"url": {
					"raw": "127.0.0.1:18080/api/get/by_id/plan/1",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"by_id",
						"plan",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check journal emptiness",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Plan created successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"journal_tables\": []\r",
							"    };\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/get/all/journal_table",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"all",
						"journal_table"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check lesson emptiness",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Plan created successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"lessons\": []\r",
							"    };\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/get/all/lesson",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"all",
						"lesson"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create jornal",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"teacher_id\": 1,\r\n    \"methodist_id\": 3,\r\n    \"grade_id\": 1,\r\n    \"subject_id\": 1,\r\n    \"plan_id\": 1,\r\n    \"head_id\": 4,\r\n    \"schedule\": \"1 2 3\"\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/journal_table",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"journal_table"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check journal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Journal created successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"journal_table\": {\r",
							"            \"id\": 1,\r",
							"            \"teacher_id\": 1,\r",
							"            \"methodist_id\": 3,\r",
							"            \"grade_id\": 1,\r",
							"            \"subject_id\": 1,\r",
							"            \"plan_id\": 1,\r",
							"            \"head_id\": 4,\r",
							"            \"schedule\": \"1 2 3\"\r",
							"        }\r",
							"    };\r",
							"\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/get/by_id/journal_table/1",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"by_id",
						"journal_table",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check lessons",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Journal created successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"lessons\": [\r",
							"            {\r",
							"                \"id\": 1,\r",
							"                \"theme_id\": 1,\r",
							"                \"date_val\": \"2022-09-05\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 2,\r",
							"                \"theme_id\": 2,\r",
							"                \"date_val\": \"2022-09-06\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 3,\r",
							"                \"theme_id\": 3,\r",
							"                \"date_val\": \"2022-09-07\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 4,\r",
							"                \"theme_id\": 4,\r",
							"                \"date_val\": \"2022-09-12\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 5,\r",
							"                \"theme_id\": 5,\r",
							"                \"date_val\": \"2022-09-13\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 6,\r",
							"                \"theme_id\": 6,\r",
							"                \"date_val\": \"2022-09-14\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 7,\r",
							"                \"theme_id\": 7,\r",
							"                \"date_val\": \"2022-09-19\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 8,\r",
							"                \"theme_id\": 8,\r",
							"                \"date_val\": \"2022-09-20\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 9,\r",
							"                \"theme_id\": 9,\r",
							"                \"date_val\": \"2022-09-21\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 10,\r",
							"                \"theme_id\": 10,\r",
							"                \"date_val\": \"2022-09-26\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 11,\r",
							"                \"theme_id\": 11,\r",
							"                \"date_val\": \"2022-09-27\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 12,\r",
							"                \"theme_id\": 12,\r",
							"                \"date_val\": \"2022-09-28\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 13,\r",
							"                \"theme_id\": 13,\r",
							"                \"date_val\": \"2022-10-03\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 14,\r",
							"                \"theme_id\": 14,\r",
							"                \"date_val\": \"2022-10-04\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 15,\r",
							"                \"theme_id\": 15,\r",
							"                \"date_val\": \"2022-10-05\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 16,\r",
							"                \"theme_id\": 16,\r",
							"                \"date_val\": \"2022-10-10\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 17,\r",
							"                \"theme_id\": 17,\r",
							"                \"date_val\": \"2022-10-11\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 18,\r",
							"                \"theme_id\": 18,\r",
							"                \"date_val\": \"2022-10-12\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 19,\r",
							"                \"theme_id\": 19,\r",
							"                \"date_val\": \"2022-10-17\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 20,\r",
							"                \"theme_id\": 20,\r",
							"                \"date_val\": \"2022-10-18\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 21,\r",
							"                \"theme_id\": 21,\r",
							"                \"date_val\": \"2022-10-19\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 22,\r",
							"                \"theme_id\": 22,\r",
							"                \"date_val\": \"2022-10-24\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 23,\r",
							"                \"theme_id\": 23,\r",
							"                \"date_val\": \"2022-10-25\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 24,\r",
							"                \"theme_id\": 24,\r",
							"                \"date_val\": \"2022-10-26\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 25,\r",
							"                \"theme_id\": 25,\r",
							"                \"date_val\": \"2022-10-31\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 26,\r",
							"                \"theme_id\": 26,\r",
							"                \"date_val\": \"2022-11-01\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 27,\r",
							"                \"theme_id\": 27,\r",
							"                \"date_val\": \"2022-11-02\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 28,\r",
							"                \"theme_id\": 28,\r",
							"                \"date_val\": \"2022-11-07\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 29,\r",
							"                \"theme_id\": 29,\r",
							"                \"date_val\": \"2022-11-08\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 30,\r",
							"                \"theme_id\": 30,\r",
							"                \"date_val\": \"2022-11-09\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 31,\r",
							"                \"theme_id\": 31,\r",
							"                \"date_val\": \"2022-11-14\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 32,\r",
							"                \"theme_id\": 32,\r",
							"                \"date_val\": \"2022-11-15\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 33,\r",
							"                \"theme_id\": 33,\r",
							"                \"date_val\": \"2022-11-16\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 34,\r",
							"                \"theme_id\": 34,\r",
							"                \"date_val\": \"2022-11-21\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 35,\r",
							"                \"theme_id\": 35,\r",
							"                \"date_val\": \"2022-11-22\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 36,\r",
							"                \"theme_id\": 36,\r",
							"                \"date_val\": \"2022-11-23\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 37,\r",
							"                \"theme_id\": 37,\r",
							"                \"date_val\": \"2022-11-28\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 38,\r",
							"                \"theme_id\": 38,\r",
							"                \"date_val\": \"2022-11-29\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 39,\r",
							"                \"theme_id\": 39,\r",
							"                \"date_val\": \"2022-11-30\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 40,\r",
							"                \"theme_id\": 40,\r",
							"                \"date_val\": \"2022-12-05\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 41,\r",
							"                \"theme_id\": 41,\r",
							"                \"date_val\": \"2022-12-06\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 42,\r",
							"                \"theme_id\": 42,\r",
							"                \"date_val\": \"2022-12-07\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 43,\r",
							"                \"theme_id\": 43,\r",
							"                \"date_val\": \"2022-12-12\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 44,\r",
							"                \"theme_id\": 44,\r",
							"                \"date_val\": \"2022-12-13\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 45,\r",
							"                \"theme_id\": 45,\r",
							"                \"date_val\": \"2022-12-14\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 46,\r",
							"                \"theme_id\": 46,\r",
							"                \"date_val\": \"2022-12-19\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 47,\r",
							"                \"theme_id\": 47,\r",
							"                \"date_val\": \"2022-12-20\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 48,\r",
							"                \"theme_id\": 48,\r",
							"                \"date_val\": \"2022-12-21\",\r",
							"                \"journal_table_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 49,\r",
							"                \"theme_id\": 49,\r",
							"                \"date_val\": \"2022-12-26\",\r",
							"                \"journal_table_id\": 1\r",
							"            }\r",
							"        ]\r",
							"    };\r",
							"\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/get/all/lesson",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"all",
						"lesson"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check mark emptiness",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Plan created successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"marks\": []\r",
							"    };\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/get/all/mark",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"all",
						"mark"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create mark",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"mark_value\": \"5\",\r\n    \"student_id\": 1,\r\n    \"lesson_id\": 1\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/mark",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"mark"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check mark",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Journal created successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"mark\": {\r",
							"            \"journal_table_id\": 1,\r",
							"            \"student_id\": 1,\r",
							"            \"id\": 1,\r",
							"            \"mark_value\": \"5\",\r",
							"            \"lesson_id\": 1\r",
							"        }\r",
							"    };\r",
							"\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/get/by_id/mark/1",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"by_id",
						"mark",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change mark",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1,\r\n    \"mark_value\": \"Н\"\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/mark",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"mark"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check changed mark",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Journal created successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"mark\": {\r",
							"            \"journal_table_id\": 1,\r",
							"            \"student_id\": 1,\r",
							"            \"id\": 1,\r",
							"            \"mark_value\": \"Н\",\r",
							"            \"lesson_id\": 1\r",
							"        }\r",
							"    };\r",
							"\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/get/by_id/mark/1",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"by_id",
						"mark",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change jornal",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1,\r\n    \"teacher_id\": 10,\r\n    \"methodist_id\": 10,\r\n    \"grade_id\": 10,\r\n    \"head_id\": 4,\r\n    \"schedule\": \"1 3\"\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/journal_table",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"journal_table"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check changed journal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Journal changed successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"journal_table\": {\r",
							"            \"id\": 1,\r",
							"            \"teacher_id\": 10,\r",
							"            \"methodist_id\": 10,\r",
							"            \"grade_id\": 10,\r",
							"            \"subject_id\": 1,\r",
							"            \"plan_id\": 1,\r",
							"            \"head_id\": 4,\r",
							"            \"schedule\": \"1 3\"\r",
							"        }\r",
							"    };\r",
							"\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/get/by_id/journal_table/1",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"by_id",
						"journal_table",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete journal",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\" : 1\r\n}"
				},
				"url": {
					"raw": "http://127.0.0.1:18080/api/drop/journal_table",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"drop",
						"journal_table"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check journal deleting",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Plan created successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"journal_tables\": []\r",
							"    };\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/get/all/journal_table",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"all",
						"journal_table"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check grade emptiness",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Plan created successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"grades\": []\r",
							"    };\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/get/all/grade",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"all",
						"grade"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create grade",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 0,\r\n    \"name\": \"AUF\",\r\n    \"head_id\": 4,\r\n    \"is_group\": false\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/grade",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"grade"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check grade",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Grade created successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"grade\": {\r",
							"            \"id\": 1,\r",
							"            \"name\": \"AUF\",\r",
							"            \"head_id\": 4,\r",
							"            \"is_group\": false\r",
							"        }\r",
							"    };\r",
							"\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/get/by_id/grade/1",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"by_id",
						"grade",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check head of grade",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Grade created successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"grades\": [\r",
							"            {\r",
							"                \"id\": 1,\r",
							"                \"name\": \"AUF\",\r",
							"                \"is_group\": false,\r",
							"                \"head\": {\r",
							"                    \"id\": 4,\r",
							"                    \"name\": \"headN\"\r",
							"                }\r",
							"            }\r",
							"        ]\r",
							"    };\r",
							"\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/get/all/grade[*,head_id[id,name]]",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"all",
						"grade[*,head_id[id,name]]"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create grade with students",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"many_to_many\" : \"replace\",\r\n    \"name\": \"AUF2\",\r\n    \"head_id\": 4,\r\n    \"is_group\": true,\r\n    \"student\": [\r\n        1,\r\n        2,\r\n        3\r\n    ]\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/grade",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"grade"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check grade 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Grade created successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"grade\": {\r",
							"            \"id\": 2,\r",
							"            \"name\": \"AUF2\",\r",
							"            \"head_id\": 4,\r",
							"            \"is_group\": true\r",
							"        }\r",
							"    };\r",
							"\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/get/by_id/grade/2",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"by_id",
						"grade",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check grade 2 students",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Grade created successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"grade_students\": \r",
							"        [\r",
							"            {\r",
							"                \"student_id\": 1,\r",
							"                \"id\": 1,\r",
							"                \"grade_id\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 2,\r",
							"                \"student_id\": 2,\r",
							"                \"grade_id\": 2\r",
							"            },\r",
							"            {\r",
							"                \"student_id\": 3,\r",
							"                \"id\": 3,\r",
							"                \"grade_id\": 2\r",
							"            }\r",
							"        ]\r",
							"    };\r",
							"\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/get/all/grade_student",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"all",
						"grade_student"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add students to grade",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"many_to_many\" : \"add\",\r\n    \"id\": 2,\r\n    \"student\": [\r\n        1,\r\n        2,\r\n        3\r\n    ]\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/grade",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"grade"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check grade 2 students 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Grade created successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"grade_students\": [\r",
							"            {\r",
							"                \"student_id\": 1,\r",
							"                \"id\": 1,\r",
							"                \"grade_id\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 2,\r",
							"                \"student_id\": 2,\r",
							"                \"grade_id\": 2\r",
							"            },\r",
							"            {\r",
							"                \"student_id\": 3,\r",
							"                \"id\": 3,\r",
							"                \"grade_id\": 2\r",
							"            },\r",
							"            {\r",
							"                \"id\": 4,\r",
							"                \"student_id\": 1,\r",
							"                \"grade_id\": 2\r",
							"            },\r",
							"            {\r",
							"                \"student_id\": 2,\r",
							"                \"id\": 5,\r",
							"                \"grade_id\": 2\r",
							"            },\r",
							"            {\r",
							"                \"student_id\": 3,\r",
							"                \"id\": 6,\r",
							"                \"grade_id\": 2\r",
							"            }\r",
							"        ]\r",
							"    };\r",
							"\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/get/all/grade_student",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"all",
						"grade_student"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change grade",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1,\r\n    \"name\": \"AF\",\r\n    \"head_id\": 1\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/grade",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"grade"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check changed grade",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Grade changed successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"grade\": {\r",
							"            \"id\": 1,\r",
							"            \"name\": \"AF\",\r",
							"            \"head_id\": 1,\r",
							"            \"is_group\": false\r",
							"        }\r",
							"    };\r",
							"\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/get/by_id/grade/1",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"by_id",
						"grade",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check journal emptiness 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Plan created successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"journal_tables\": []\r",
							"    };\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/get/all/journal_table",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"all",
						"journal_table"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create jornal 2-1",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"teacher_id\": 1,\r\n    \"methodist_id\": 3,\r\n    \"grade_id\": 1,\r\n    \"subject_id\": 1,\r\n    \"plan_id\": 1,\r\n    \"head_id\": 4,\r\n    \"schedule\": \"1 2 3\"\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/journal_table",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"journal_table"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create jornal 2-1",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"teacher_id\": 1,\r\n    \"methodist_id\": 3,\r\n    \"grade_id\": 1,\r\n    \"subject_id\": 1,\r\n    \"plan_id\": 1,\r\n    \"head_id\": 4,\r\n    \"schedule\": \"1 2 3\"\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/journal_table",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"journal_table"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete journals",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\" : [2, 3]\r\n}"
				},
				"url": {
					"raw": "http://127.0.0.1:18080/api/drop/journal_table",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"drop",
						"journal_table"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check journal deleting 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Plan created successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"journal_tables\": []\r",
							"    };\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/get/all/journal_table",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"all",
						"journal_table"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create jornal 3-1",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"teacher_id\": 1,\r\n    \"methodist_id\": 3,\r\n    \"grade_id\": 1,\r\n    \"subject_id\": 1,\r\n    \"plan_id\": 1,\r\n    \"head_id\": 4,\r\n    \"schedule\": \"1 2 3\"\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/journal_table",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"journal_table"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create jornal 3-2",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"teacher_id\": 1,\r\n    \"methodist_id\": 3,\r\n    \"grade_id\": 1,\r\n    \"subject_id\": 1,\r\n    \"plan_id\": 1,\r\n    \"head_id\": 4,\r\n    \"schedule\": \"1 2 3\"\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/journal_table",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"journal_table"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create jornal 3-3",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"teacher_id\": 1,\r\n    \"methodist_id\": 1,\r\n    \"grade_id\": 1,\r\n    \"subject_id\": 1,\r\n    \"plan_id\": 1,\r\n    \"head_id\": 4,\r\n    \"schedule\": \"1 2 3\"\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/journal_table",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"journal_table"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete journal by methodist",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"methodist_id\" : 3\r\n}"
				},
				"url": {
					"raw": "http://127.0.0.1:18080/api/drop/journal_table",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"drop",
						"journal_table"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check journal deleting 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Journal changed successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"journal_tables\": [\r",
							"            {\r",
							"                \"subject_id\": 1,\r",
							"                \"id\": 6,\r",
							"                \"teacher_id\": 1,\r",
							"                \"methodist_id\": 1,\r",
							"                \"grade_id\": 1,\r",
							"                \"head_id\": 4,\r",
							"                \"plan_id\": 1,\r",
							"                \"schedule\": \"1 2 3\"\r",
							"            }\r",
							"        ]\r",
							"    };\r",
							"\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/get/all/journal_table",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"all",
						"journal_table"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create problem 1",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Введите A\",\r\n    \"nickname\": \"cin\",\r\n    \"checker_name\": \"NUN\",\r\n    \"test_count\": 2,\r\n    \"example_count\": 1,\r\n    \"time_limit\": 1000,\r\n    \"memory_limit\": 256\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/problem",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"problem"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create problem 2",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"A + B\",\r\n    \"nickname\": \"summa\",\r\n    \"checker_name\": \"NUN\",\r\n    \"test_count\": 2,\r\n    \"example_count\": 1,\r\n    \"time_limit\": 1000,\r\n    \"memory_limit\": 256\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/problem",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"problem"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create problem 3",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Квадратное уравнение\",\r\n    \"nickname\": \"quadratic-equation\",\r\n    \"checker_name\": \"NUN\",\r\n    \"test_count\": 100,\r\n    \"example_count\": 3,\r\n    \"time_limit\": 1000,\r\n    \"memory_limit\": 256\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/problem",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"problem"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create competition 1",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Пробный тур\",\r\n    \"start_time\": \"2023-04-02 15:00:00\",\r\n    \"end_time\": \"2023-04-03 00:00:00\"\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/competition",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"competition"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create competition 2",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Очный тур\",\r\n    \"start_time\": \"2023-04-03 12:00:00\",\r\n    \"end_time\": \"2023-04-04 00:00:00\"\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/competition",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"competition"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add problems to competition",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"many_to_many\" : \"add\",\r\n    \"id\": 1,\r\n    \"problem\": [\r\n        1,\r\n        2\r\n    ]\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/competition",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"competition"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add competitions to problem",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"many_to_many\" : \"add\",\r\n    \"id\": 3,\r\n    \"competition\": [\r\n        2\r\n    ]\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/problem",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"problem"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check competition problems",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Journal changed successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"competition_problems\": [\r",
							"            {\r",
							"                \"competition_id\": 1,\r",
							"                \"id\": 1,\r",
							"                \"problem_id\": 1,\r",
							"                \"name\": \"Введите A\"\r",
							"            },\r",
							"            {\r",
							"                \"id\": 2,\r",
							"                \"competition_id\": 1,\r",
							"                \"problem_id\": 2,\r",
							"                \"name\": \"A + B\"\r",
							"            },\r",
							"            {\r",
							"                \"competition_id\": 2,\r",
							"                \"id\": 3,\r",
							"                \"problem_id\": 3,\r",
							"                \"name\": \"Квадратное уравнение\"\r",
							"            }\r",
							"        ]\r",
							"    };\r",
							"\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/get/all/competition_problem",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"all",
						"competition_problem"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add competitions to 1 user",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"many_to_many\" : \"add\",\r\n    \"id\": 1,\r\n    \"competition\": [\r\n        1,\r\n        2\r\n    ]\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/user",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check competition users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Journal changed successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"competition_users\": [\r",
							"            {\r",
							"                \"id\": 1,\r",
							"                \"competition_id\": 1,\r",
							"                \"user_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"competition_id\": 2,\r",
							"                \"id\": 2,\r",
							"                \"user_id\": 1\r",
							"            }\r",
							"        ]\r",
							"    };\r",
							"\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/get/all/competition_user",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"all",
						"competition_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add users to competition",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"many_to_many\" : \"replace\",\r\n    \"id\": 1,\r\n    \"user\": [\r\n        2,\r\n        3\r\n    ]\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/competition",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"competition"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check competition users 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Journal changed successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"competition_users\": [\r",
							"            {\r",
							"                \"competition_id\": 2,\r",
							"                \"id\": 2,\r",
							"                \"user_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"id\": 3,\r",
							"                \"competition_id\": 1,\r",
							"                \"user_id\": 2\r",
							"            },\r",
							"            {\r",
							"                \"competition_id\": 1,\r",
							"                \"id\": 4,\r",
							"                \"user_id\": 3\r",
							"            }\r",
							"        ]\r",
							"    };\r",
							"\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/get/all/competition_user",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"all",
						"competition_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add competitions to 1 user 2",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"many_to_many\" : \"add\",\r\n    \"id\": 1,\r\n    \"competition\": [\r\n        1\r\n    ]\r\n}"
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/user",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check competition of users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Journal changed successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"competition_users\": [\r",
							"            {\r",
							"                \"competition\": {\r",
							"                    \"id\": 1,\r",
							"                    \"name\": \"Пробный тур\",\r",
							"                    \"start_time\": \"2023-04-02 15:00:00\"\r",
							"                },\r",
							"                \"id\": 5,\r",
							"                \"user_id\": 1\r",
							"            },\r",
							"            {\r",
							"                \"competition\": {\r",
							"                    \"id\": 2,\r",
							"                    \"name\": \"Очный тур\",\r",
							"                    \"start_time\": \"2023-04-03 12:00:00\"\r",
							"                },\r",
							"                \"id\": 2,\r",
							"                \"user_id\": 1\r",
							"            }\r",
							"        ]\r",
							"    };\r",
							"\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/get/if/competition_user[*,competition_id[id,name,start_time]]/user_id=1",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"if",
						"competition_user[*,competition_id[id,name,start_time]]",
						"user_id=1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send user answer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user_id\":  2,\r\n    \"question_id\": 2,\r\n    \"value\": \"12345\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:18080/api/post/answer",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"post",
						"answer"
					]
				}
			},
			"response": []
		},
		{
			"name": "Upload users",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "filename",
							"value": "user.data",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "/D:/projects/VSCode/KusServer/tests/user.data"
						},
						{
							"key": "index",
							"value": "data",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "127.0.0.1:18080/api/upload/user",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"upload",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Upload journal",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "filename",
							"value": "journal.data",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "/D:/projects/VSCode/KusServer/tests/journal.data"
						},
						{
							"key": "index",
							"value": "data",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "127.0.0.1:18080/api/upload/journal_table",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"upload",
						"journal_table"
					]
				}
			},
			"response": []
		},
		{
			"name": "Submit source file 1",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "filename",
							"value": "source.cpp",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "/D:/projects/VSCode/KusServer/tests/source.cpp"
						},
						{
							"key": "user_id",
							"value": "25",
							"type": "text"
						},
						{
							"key": "problem_id",
							"value": "1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "127.0.0.1:18080/api/submit",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"submit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Submit source file 2",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "filename",
							"value": "source.cpp",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "/D:/projects/VSCode/KusServer/tests/while_hello.cpp"
						},
						{
							"key": "user_id",
							"value": "25",
							"type": "text"
						},
						{
							"key": "problem_id",
							"value": "1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "127.0.0.1:18080/api/submit",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"submit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Submit source file 3",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "filename",
							"value": "source.cpp",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "/D:/projects/VSCode/KusServer/tests/empty.cpp"
						},
						{
							"key": "user_id",
							"value": "25",
							"type": "text"
						},
						{
							"key": "problem_id",
							"value": "3",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "127.0.0.1:18080/api/submit",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"submit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Submit while true source",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "filename",
							"value": "source.cpp",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "/D:/projects/VSCode/KusServer/tests/while_empty.cpp"
						},
						{
							"key": "user_id",
							"value": "25",
							"type": "text"
						},
						{
							"key": "problem_id",
							"value": "3",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "127.0.0.1:18080/api/submit",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"submit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send mail",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "techName",
							"value": "mail",
							"type": "text"
						},
						{
							"key": "login",
							"value": "",
							"type": "text"
						},
						{
							"key": "password",
							"value": "",
							"type": "text"
						},
						{
							"key": "address",
							"value": "oa1oa@mail.ru;comrade_1997@mail.ru",
							"type": "text"
						},
						{
							"key": "theme",
							"value": "Тестовая рассылка",
							"type": "text"
						},
						{
							"key": "text",
							"type": "file",
							"src": "letter.txt"
						},
						{
							"key": "data",
							"type": "file",
							"src": "letter_data.txt"
						}
					]
				},
				"url": {
					"raw": "127.0.0.1:18080/api/multitool",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"multitool"
					]
				}
			},
			"response": []
		},
		{
			"name": "Clear system",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/command/restart/empty",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"command",
						"restart",
						"empty"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send dump",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "techName",
							"value": "dump",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "example.dmp"
						}
					]
				},
				"url": {
					"raw": "127.0.0.1:18080/api/multitool",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"multitool"
					]
				}
			},
			"response": []
		},
		{
			"name": "Full system clear",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/command/restart/full",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"command",
						"restart",
						"full"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check teacher journals",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Journal changed successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"journal_tables\": [\r",
							"            {\r",
							"                \"id\":1,\r",
							"                \"subject\": {\r",
							"                    \"name\":\"Программирование С++\"\r",
							"                    }\r",
							"            },\r",
							"            {\r",
							"                \"id\":2,\r",
							"                \"subject\": {\r",
							"                    \"name\":\"Алгоритмы и структуры данных\"\r",
							"                    }\r",
							"            }\r",
							"        ]\r",
							"    };\r",
							"\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/get/if/journal_table[id,group_id,is_group,subject_id[name]]/teacher_id=21",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get",
						"if",
						"journal_table[id,group_id,is_group,subject_id[name]]",
						"teacher_id=21"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check get_all_competition",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Journal changed successfully\", () => {\r",
							"    const expectedObject = \r",
							"    {\r",
							"        \"journal_tables\": [\r",
							"            {\r",
							"                \"subject_id\": 1,\r",
							"                \"id\": 6,\r",
							"                \"teacher_id\": 1,\r",
							"                \"methodist_id\": 1,\r",
							"                \"grade_id\": 1,\r",
							"                \"head_id\": 4,\r",
							"                \"is_group\": false,\r",
							"                \"plan_id\": 1,\r",
							"                \"schedule\": \"1 2 3\"\r",
							"            }\r",
							"        ]\r",
							"    };\r",
							"\r",
							"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:18080/api/get_all_competition/25/1",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "18080",
					"path": [
						"api",
						"get_all_competition",
						"25",
						"1"
					]
				}
			},
			"response": []
		}
	]
}